# IF CHANGES ARE NOT WORKING RUN:
# after changes run: sudo nginx -s reload

# IF STYLES ARE STILL NOT WORKING ITS BECAUSE OF THE BROWSER CACHE, YOU HAVE TO HARD RESET BY DOING: 
#		```CNTRL-SHIFT-R```

# if you are getting a 403 error you need to change the permissions of the directory where the project is located, 
#		for example the sample project is "/home/kalivm90/Dev/nginx/sample_nginx_project" so use this command:
#		```sudo chmod 755 /home/kalivm90/Dev/nginx/sample_nginx_project```
#			if that does not work go a directory up and chmod 755 it until it does, example: 
#			```sudo chmod 755 /home/kalivm90/Dev/nginx```
#			```sudo chmod 755 /home/kalivm90/Dev```
#			```sudo chmod 755 /home/kalivm90```
# 	if it still doesnt work change the permission of the index.html file manually 
#			```sudo chmod 644 /home/kalivm90/Dev/nginx/sample_nginx_project/index.html```



http {
	# You add this to define what MIME Types: file extensions to include, thankfully nginx includes default mime types in mime.types so you dont need to list them all out
	# To import mime.types use include directive
	# types {
	# 	text/css css;
	# 	text/html html;
	# }

	include mime.types;  # this includes all types defined in mime.types

	# this is defining all the instances of the dockerfile containers running (LOADBALANCING)
	upstream backendserver {
		server 127.0.0.1:1111;
		server 127.0.0.1:2222;
		server 127.0.0.1:3333;
		server 127.0.0.1:4444;
	}

	server {
		listen 8080;
		root /home/kalivm90/Dev/nginx/sample_nginx_project;


		location / {
			# The proxy_pass directive forwards requests to another server. In this case, it forwards the requests to the backendserver defined in the upstream block.
			proxy_pass http://backendserver/; 
		
		}

		# the location directive is for other paths in the site followed by the path you want. /fruits gets appended to root. in sample_nginx_porject there is a /fruits folder with a index.html
		location /fruits {
			root /home/kalivm90/Dev/nginx/sample_nginx_project;
		}

		# /carbs will render /fruits/index.html with "alias"  
		location /carbs {
			alias /home/kalivm90/Dev/nginx/sample_nginx_project/fruits; # alias does not append the location after the root
		}

		# /vegetables does not have a index.html as the entry point, instead it is "veggies.html". for that you use "try_files" directive
		location /vegetables {
			root /home/kalivm90/Dev/nginx/sample_nginx_project;
			try_files /vegetables/veggies.html /index.html =404; # first try vegetables/veggies.html, if not found use /index.html in root, else throw a 404 error
		}

		# this rewrites a url that matches a pattern. So if the url matches /count/9 it is written as /number/9 the problem is I cant get js to work
		rewrite ^/number/(\w+) /count/$1;

		# you can also use regex expressions (with location ~*) in the url
		location ~* /count/[0-9] {
			root /home/kalivm90/Dev/nginx/sample_nginx_project;
			try_files /index.html =404;
		}

		# /crops will return a redirect status code to the location specified
		location /crops {
			return 307 /fruits; # Will return Temporary Redirect status code to /fruits (the url will be in the Location header)
		}
	}
}
 
events {}